// Previous schema content remains...

// Board Models
model Board {
  id          String       @id @default(cuid())
  name        String
  gameId      String
  game        Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  layout      Json        // Grid configuration, dimensions, etc.
  zones       BoardZone[]
  layers      BoardLayer[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([gameId])
}

model BoardLayer {
  id        String     @id @default(cuid())
  name      String
  boardId   String
  board     Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  order     Int        // Layer stacking order
  zones     BoardZone[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([boardId])
}

model BoardZone {
  id          String       @id @default(cuid())
  name        String
  boardId     String
  board       Board       @relation(fields: [boardId], references: [id])
  layerId     String
  layer       BoardLayer  @relation(fields: [layerId], references: [id])
  type        ZoneType
  position    Json        // {x, y, width, height}
  properties  Json?       // Zone-specific properties
  allowedTypes ItemType[] // Array of allowed item types
  items       ItemLocation[]
  effects     Effect[]    // Active effects in this zone
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([boardId])
  @@index([layerId])
}

// Rule and Effect Models
model Effect {
  id          String       @id @default(cuid())
  name        String
  sourceId    String      // ID of the card/item causing the effect
  type        EffectType
  scope       EffectScope
  priority    Int
  conditions  Json?       // Conditions for effect activation
  duration    Duration?   // null means permanent
  properties  Json        // Effect-specific properties
  zoneId      String?
  zone        BoardZone?  @relation(fields: [zoneId], references: [id])
  playerId    String?
  player      Player?     @relation(fields: [playerId], references: [id])
  gameId      String
  game        Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expiresAt   DateTime?

  @@index([gameId])
  @@index([zoneId])
  @@index([playerId])
}

model Duration {
  id        String   @id @default(cuid())
  effectId  String   @unique
  effect    Effect   @relation(fields: [effectId], references: [id])
  type      DurationType
  value     Int      // Number of turns, rounds, or specific timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EffectType {
  RULE_MODIFICATION
  STAT_MODIFICATION
  ZONE_MODIFICATION
  PLAYER_MODIFICATION
  GAME_MODIFICATION
}

enum EffectScope {
  GLOBAL
  ZONAL
  PLAYER
  ITEM
}

enum DurationType {
  TURNS
  ROUNDS
  TIMESTAMP
  CONDITIONAL
}